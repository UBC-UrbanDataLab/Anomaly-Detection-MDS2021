[global_tags]
  user = "test"

###[[inputs.file]]
  ## Files to parse each interval.  Accept standard unix glob matching rules,
  ## as well as ** to match recursive files and directories.
###  files = ["/tmp/CEC_HW.json"]

  ## Data format to consume.
  ## Each data format has its own unique set of configuration options, read
  ## more about them here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
###  data_format = "json"

  ## When strict is true and a JSON array is being parsed, all objects within the
  ## array must be valid
###  json_strict = true

  ## Query is a GJSON path that specifies a specific chunk of JSON to be
  ## parsed, if not specified the whole document will be parsed.
  ##
  ## GJSON query paths are described here:
  ##   https://github.com/tidwall/gjson/tree/v1.3.0#path-syntax
###  json_query = "rows"

  ## Tag keys is an array of keys that should be added as tags.  Matching keys
  ## are no longer saved as fields. Supports wildcard glob matching.
  #tag_keys = [
  #  "my_tag_1",
  #  "my_tag_2",
  #  "tags_*",
  #  "tag*"
  #]

  ## Array of glob pattern strings or booleans keys that should be added as string fields.
###  json_string_fields = ["v0__kind"]

  ## Name key is the key to use as the measurement name.
  #json_name_key = ""

  ## Time key is the key containing the time that should be used to create the
  ## metric.
###  json_time_key = "ts_val"

  ## Time format is the time layout that should be used to interpret the json_time_key.
  ## The time must be `unix`, `unix_ms`, `unix_us`, `unix_ns`, or a time in the
  ## "reference time".  To define a different format, arrange the values from
  ## the "reference time" in the example to match the format you will be
  ## using.  For more information on the "reference time", visit
  ## https://golang.org/pkg/time/#Time.Format
  ##   ex: json_time_format = "Mon Jan 2 15:04:05 -0700 MST 2006"
  ##       json_time_format = "2006-01-02T15:04:05Z07:00"
  ##       json_time_format = "01/02/2006 15:04:05"
  ##       json_time_format = "unix"
  ##       json_time_format = "unix_ms"
###  json_time_format = "2021-04-15T14:43:57-07:00"

  ## Timezone allows you to provide an override for timestamps that
  ## don't already include an offset
  ## e.g. 04/06/2016 12:41:45
  ##
  ## Default: "" which renders UTC
  ## Options are as follows:
  ##   1. Local               -- interpret based on machine localtime
  ##   2. "America/New_York"  -- Unix TZ values like those found in https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  ##   3. UTC                 -- or blank/unspecified, will return timestamp in UTC
  #json_timezone = "Vancouver"

[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = false
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## If true, collect raw CPU time metrics.
  collect_cpu_time = false
  ## If true, compute and report the sum of all non-idle CPU states.
  report_active = false

[[inputs.mem]]

# Output Configuration for telegraf agent
[[outputs.influxdb_v2]]	
  ## Point to your influxdb container
  urls = ["http://influxdb:8086"]
  ## Token for authentication; created with the influxdb_cli service.
  token = "mytoken"
  ## Organization is the name of the organization you wish to write to; created with the influxdb_cli service.
  organization = "myorg"
  ## Destination bucket to write into; created with the influxdb_cli service.
  bucket = "mybucket"