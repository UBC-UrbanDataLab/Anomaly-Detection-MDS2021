[[inputs.file]]
  ## Files to parse each interval.  Accept standard unix glob matching rules,
  ## as well as ** to match recursive files and directories.
  files = ["/tmp/CEC_HW.xml"]

  ## Data format to consume.
  ## Each data format has its own unique set of configuration options, read
  ## more about them here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
  data_format = "xml"

  [[inputs.file.xml]]
    ## Optional: XPath-query to select a subset of nodes from the XML document.
    metric_selection = "/grid/child::row"

    ## Optional: XPath-query to set the metric (measurement) name.
    metric_name = "string('Reading')"

    ## Optional: Query to extract metric timestamp.
    ## If not specified the time of execution is used.
    timestamp = "ts/@val"
    ## Optional: Format of the timestamp determined by the query above.
    ## This can be any of "unix", "unix_ms", "unix_us", "unix_ns" or a valid Golang
    ## time format. If not specified, a "unix" timestamp (in seconds) is expected.
    timestamp_format = "2006-01-02T15:04:05-07:00 Vancouver"

    ## Tag definitions using the given XPath queries.
    [inputs.file.xml.tags]
      id   = "/grid/cols/v0/meta/id/@val"
      equipRef = "/grid/cols/v0/meta/equipRef/@dis"
      navName = "/grid/cols/v0/meta/navname/@val"
      siteRef = "/grid/cols/v0/meta/siteRef/@dis"
      unit = "/grid/cols/v0/meta/unit/@val"
      Status = "/grid/cols/v0/meta/curStatus/@val"

    ## Integer field definitions using XPath queries.
    #[inputs.file.xml.fields_int]
    #  consumers = "Variable/@consumers"

    ## Non-integer field definitions using XPath queries.
    ## The field type is defined using XPath expressions such as number(), boolean() or string(). If no conversion is performed the field will be of type string.
    [inputs.file.xml.fields]
      #measurement value, removes any units following the number.
      measurement = "number(translate(v0/@val, 'abcdefghijklmnopqrstuvwqyzABCDEFGHIJKLMNOPQRSTUVWXYZ°', ''))"

[[processors.execd]]
  ## One program to run as daemon.
  ## NOTE: process and each argument should each be their own string
  ## eg: command = ["/path/to/your_program", "arg1", "arg2"]
  command = ["python", "/tmp/testpy.py"]

  ## Delay before the process is restarted after an unexpected termination
  # restart_delay = "10s"
  
#[agent]
  ## Default data collection interval for all inputs
  #interval = "10s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  #round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  #metric_batch_size = 1000

  ## For failed writes, telegraf will cache metric_buffer_limit metrics for each
  ## output, and will flush this buffer on a successful write. Oldest metrics
  ## are dropped first when this buffer fills.
  ## This buffer only fills when writes fail to output plugin(s).
  #metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  #collection_jitter = "0s"

  ## Default flushing interval for all outputs. You shouldn't set this below
  ## interval. Maximum flush_interval will be flush_interval + flush_jitter
  #flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  #flush_jitter = "0s"

  ## By default, precision will be set to the same timestamp order as the
  ## collection interval, with the maximum being 1s.
  ## Precision will NOT be used for service inputs, such as logparser and statsd.
  ## Valid values are "ns", "us" (or "µs"), "ms", "s".
  #precision = "1ns"

  ## Logging configuration:
  ## Run telegraf with debug log messages.
  #debug = false
  ## Run telegraf in quiet mode (error log messages only).
  #quiet = false
  ## Specify the log file name. The empty string means to log to stderr.
  #logfile = ""

  ## Override default hostname, if empty use os.Hostname()
  #hostname = "test"
  ## If set to true, do no set the "host" tag in the telegraf agent.
  #omit_hostname = false

# Output Configuration for telegraf agent
[[outputs.influxdb_v2]]	
  ## Point to your influxdb container
  urls = ["http://influxdb:8086"]
  
  data_format = "influx"
  ## Token for authentication; created with the influxdb_cli service.
  token = "mytoken"
  ## Organization is the name of the organization you wish to write to; created with the influxdb_cli service.
  organization = "UBC"
  ## Destination bucket to write into; created with the influxdb_cli service.
  bucket = "MDS2021"

# Only for debugging
#[[outputs.file]]
  ## Files to write to, "stdout" is a specially handled file.
 # files = ["stdout", "/tmp/metrics.out"]

  ## Use batch serialization format instead of line based delimiting.  The
  ## batch format allows for the production of non line based output formats and
  ## may more efficiently encode and write metrics.
  # use_batch_format = false

  ## The file will be rotated after the time interval specified.  When set
  ## to 0 no time based rotation is performed.
  # rotation_interval = "0h"

  ## The logfile will be rotated when it becomes larger than the specified
  ## size.  When set to 0 no size based rotation is performed.
  # rotation_max_size = "0MB"

  ## Maximum number of rotated archives to keep, any older logs are deleted.
  ## If set to -1, no archives are removed.
  # rotation_max_archives = 5

  ## Data format to output.
  ## Each data format has its own unique set of configuration options, read
  ## more about them here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_OUTPUT.md
  #data_format = "influx"